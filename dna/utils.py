from difflib import SequenceMatcher
from random import choice

DNA_TOKENS = ('A', 'G', 'C', 'K')
FILL_CHAR = ' '  # added to sample on left and right to match reference length
DIFF_CHAR = '*'  # display where sample is different from reference
SAME_CHAR = ' '  # display where sample matches reference

UL97_REFERENCE = 'ATGTCCTCCGCACTTCGGTCTCGGGCTCGCTCGGCCTCGCTCGGAACGACGACTCAGGGCTGGGATCCGCCGCCATTGCGTCGTCCCAGCAGGGCGCGCCGGCGCCAGTGGATGCGCGAAGCTGCGCAGGCCGCCGCTCAAGCCGCGGTACAGGCCGCGCAGGCCGCCGCCGCTCAAGTTGCCCAGGCTCACGTCGATGAAGACGAGGTCGTGGATCTGATGACCGACGAGGCCGGCGGCGGCGTCACCACTTTGACCACCCTGAGTTCCGTCAGCACAACCACCGTGCTTGGACACGCGACTTTTTCCGCATGCGTTCGAAGTGACGTGATGCGTGACGGAGAAAAAGAGGACGCGGCTTCGGACAAGGAGAACCAGCGTCGGCCCGTGGTGCCGTCCACGTCGTCTCGCGGCAGCGCCGCCAGCGGCGACGGTTACCACGGCTTGCGCTGCCGCGAAACCTCGGCCATGTGGTCGTTCGAGTACGATCGCGACGGCGACGTGACCAGCGTACGCCGCGCTCTCTTCACCGGCGGCAGCGACCCCTCGGACAGCGTGAGCGGCGTCCGCGGTGGACGCAAACGCCCGTTGCGTCCGCCGTTGGTGTCGCTGGCCCGCACCCCGCTGTGCCGACGTCGTGTGGGCGGCGTGGACGCGGTGCTCGAAGAAAACGACGTGGAGCTGCGCGCGGAAAGTCAGGACAGCGCCGTGGCATCGGGCCCGGGCCGCGTTCCGCAGCCGCTCAGCGGTAGTTCCGGGGAGGAATCCGCCACGGCGGTGGAGGCCGACTCCACGTCACACGACGACGTGCATTGCACCTGTTCCAACGACCAGATCATCACCACGTCCATCCGCGGCCTTACGTGCGACCCGCGTATGTTCTTGCGCCTTACGCATCCCGAGCTCTGCGAGCTCTCTATCTCCTACCTGCTGGTCTACGTGCCCAAAGAGGACGATTTTTGCCACAAGATCTGTTATGCCGTGGACATGAGCGACGAGAGCTACCGCCTGGGCCAGGGCTCCTTCGGCGAGGTCTGGCCGCTCGATCGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGCGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGACGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGATATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCACCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGTTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGTACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTTGGAGAACGGCAAGCTCACGCACTGCTCCGACGCCTGTCTGCTCATTCTGGCGGCGCAAATGAGCTACGGCGCCTGTCTCCTGGGCGAGCATGGCGCCGCGCTGGTGTCGCACACGCTACGCTTTGTGGAGGCCAAGATGTCCTCGTGTCGCGTACGCGCCTTTCGCCGCTTCTACCACGAATGCTCGCAGACCATGCTGCACGAATACGTCAGAAAGAACGTGGAGCGTCTGTTGGCCACGAGCGACGGGCTGTATTTATATAACGCCTTTCGGCGCACCACCAGCATAATCTGCGAGGAGGACCTTGACGGTGACTGCCGTCAACTGTTCCCCGAGTAA'
UL97_PRIMER_3 = 'TCATCACGACCAGTGGAAGCT'
UL97_PRIMER_4 = 'GCGACACGAGGACATCTTGG'
UL97_PRIMER_4_REVERSED = 'CCAAGATGTCCTCGTGTCGC'

UL97F = 'GCCACTTTGATATTACACCCATGAACGTGCTCATcaACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCACTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCACCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGTTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGTACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTTGGAGAACGGCAAGCTCACGCACTGCTCCGACGCCTGTCTGCTCATTCTGGCGGCGCAAATGAGCTACGGCGCCTGTCTCCTGGGCGAGCATGGCGCCGCGCTGGTGTCGCACACGCTACGCTTTGTGGAGGCCAAGATGT'.upper()


UL54_REFERENCE = 'ATGTTTTTCAACCCGTATCTGAGCGGCGGCTTGACCGGCGGTGCGGTCGCGGGTGGCCGGCGTCAGCGTTCGCAGCCCGGATCCGCGCAGGGCTCGGGCAAGCGGCCGCCACAGAAACAGTTTTTGCAGATCGTGCCGCGAGGCGTCATGTTCGACGGTCAGACGGGGTTGATCAAGCATAAGACGGGACGGCTGCCTCTCATGTTCTATCGAGAGATTAAACATTTGTTGAGTCATGACATGGTTTGGCCGTGTCCTTGGCGCGAGACCCTGGTGGGTCGCGTGGTGGGACCTATTCGTTTTCACACCTACGATCAGACGGACGCCGTGCTCTTCTTCGACTCGCCCGAAAACGTGTCGCCGCGCTATCGTCAGCATCTGGTGCCTTCGGGGAACGTGTTGCGTTTCTTCGGGGCCACAGAACACGGCTACAGTATCTGCGTCAACGTTTTCGGGCAGCGCAGCTACTTTTACTGTGAGTACAGCGACACCGATAGGCTGCGTGAGGTCATTGCCAGCGTGGGCGAACTAGTGCCCGAACCGCGGACGCCATACGCCGTGTCTGTCACGCCGGCCACCAAGACCTCCATCTACGGGTACGGGACGCGACCCGTGCCCGATTTGCAGTGTGTGTCTATCAGCAACTGGACCATGGCCAGAAAAATCGGCGAGTATCTGCTGGAGCAGGGTTTTCCCGTGTACGAGGTCCGTGTGGATCCGCTGACGCGTTTGGTCATCGATCGGCGGATCACCACGTTCGGCTGGTGCTCCGTGAATCGTTACGACTGGCGGCAGCAGGGTCGCGCGTCGACTTGTGATATCGAGGTCGACTGCGATGTCTCTGACCTGGTGGCCGTGCCCGACGACAGCTCGTGGCCGCGCTATCGATGCCTGTCCTTCGATATCGAGTGCATGAGCGGCGAGGGTGGTTTTCCCTGCGCCGAGAAGTCCGATGACATTGTCATTCAGATCTCGTGCGTGTGCTACGAGACGGGGGGAAACACCGCCGTGGATCAGGGGATCCCAAACGGGAACGATGGTCGGGGCTGCACTTCGGAGGGTGTGATCTTTGGGCACTCGGGTCTCCATCTCTTTACGATCGGCACCTGCGGGCAGGTGGGCCCAGACGTGGACGTCTACGAGTTCCCTTCCGAATACGAGCTGCTGCTGGGCTTTATGCTTTTCTTTCAACGGTACGCGCCGGCCTTTGTGACCGGTTACAACATCAACTCTTTTGACTTGAAGTACATCCTCACGCGCCTCGAGTACCTGTATAAGGTGGACTCGCAGCGCTTCTGCAAGTTGCCCACGGCGCAGGGCGGCCGTTTCTTTTTACACAGCCCCGCTGTGGGTTTTAAGCGGCAGTACGCCGCCGCCTTTCCCTCGGCTTCTCACAACAATCCGGCTAGCACGGCCGCCACCAAGGTGTATATTGCGGGTTCGGTGGTTATCGACATGTACCCCGTATGCATGGCCAAGACTAACTCGCCCAACTATAAGCTCAACACTATGGCCGAGCTTTACCTGCGGCAACGCAAGGATGACCTGTCCTACAAGGACATCCCGCGTTGTTTCGTGGCTAATGCCGAGGGCCGCGCCCAGGTAGGCCGTTACTGTCTGCAGGACGCCGTATTGGTGCGCGATCTGTTCAACACCATTAATTTTCACTACGAGGCCGGGGCCATCGCGCGGCTGGCTAAAATTCCGTTGCGGCGTGTCATCTTTGACGGACATCAGATCCGTATCTACACCTCGCTGCTGGACGAGTGCGCCTGCCGCGATTTTATCCTGCCCAACCACTACAGCAAAGGTACGACGGTGCCCGAAACGAATAGCGTTGCCGTGTCACCTAACGCTGCTATCATCTCTACCGCCGCTGTGCCCGGCGACGCGGGTTCTGTGGCGGCCATGTTTCAGATGTCGCCGCCCTTACAATCTGCGCCGTCGAGTCAGGACGGCGTTTTACCCGGCTCTGGCAGTAACAGTAGTAGCAGCGTTGGCGTTTTCAGCGTCGGCTCCGGCAGTAGTGGCGGCGTCGGCGTTTCCAACGACAGTCACGGCGCCGGCGGTACTGCGGCGGTTTCGTACCAGGGTGCCACGGTGTTTGAGCCCGAGGTGGGTTATTACAACGACCCCGTGGCCGTGTTCGACTTTGCCAGCCTCTACCCTTCCATCATCATGGCCCACAACCTCTGCTACTCCACCCTGCTGGTGCCGGGTGGCGAGTACCCCGTGGACCCCGCCGACGTATACAGCGTCACGCTAGAGAACGGCGTGACTCACCGCTTTGTGCGTGCTTCGGTGCGCGTCTCGGTGCTTTCGGAACTGCTCAACAAGTGGGTTTCGCAGCGCCGTGCCGTGCGCGAATGCATGCGCGAGTGTCAAGACCCCGTGCGCCGTATGCTGCTCGACAAGGAACAGATGGCACTCAAAGTAACGTGTAACGCTTTCTACGGTTTTACCGGCGTGGTCAACGGCATGATGCCGTGTCTGCCCATCGCCGCCAGCATCACGCGCATCGGTCGCGACATGCTAGAGCGCACGGCGCGGTTCATCAAAGACAACTTTTCAGAGCCGTGTTTTTTGCACAATTTTTTTAATCAGGAAGACTATGTAGTGAGAACGCGGGAGGGGGATTCGGAGGAGAGCAGCACGTTACCGGAGGGGCTCGAAACATCGTCAGGGGGCTCGGACGAACGGCGGGTGGAGGCGCGGGTCATCTACGGGGACACGGACAGCGTGTTTGTCCGCTTTCGTGGCCTGACGCCGCAGGCTCTGGTGGCGCGTGGGCCCAGCCTGGCGCACTACGTGACGGCCTGTCTTTTTGTGGAGCCCGTCAAGCTGGAGTTTGAAAAGGTCTTCGTCTCTCTCATGATGATCTGCAAAAAACGTTACATCGGCAAAGTGGAGGGCGCCTCGGGTCTGAGCATGAAGGGCGTGGATCTGGTGCGCAAGACGGCCTGCGAGTTCGTCAAGGGCGTCACGCGTGACGTCCTCTCGCTGCTCTTTGAGGATCGCGAGGTCTCGGAAGCAGCCGTGCGCCTGTCGCGCCTCTCACTCGATGAAGTCAAGAAATATGGCGTGCCACGCGGTTTCTGGCGTATCTTGCGCCGCCTGGTGCAGGCCCGCGACGATCTGTACCTGCACCGTGTGCGTGTCGAGGACCTGGTGCTTTCGTCGGTGCTTTCTAAGGACATCTCGTTGTACCGTCAATCTAACCTGCCGCACATTGCCGTCATTAAGCGACTGGCGGCCCGTTCTGAGGAGCTACCCTCGGTCGGGGATCGGGTCTTTTACGTCCTGACGGCGCCCGGTGTCCGGACGGCGCCGCAGGGTTCCTCCGACAACGGTGATTCTGTAACCGCCGGCGTGGTTTCCCGGTCGGACGCGATTGATGGCACGGACGACGACGCTGACGGCGGCGGGGTAGAGGAGAGCAACAGGAGAGGAGGAGAGCCGGCAAAGAAGAGGGCGCGGAAACCACCGTCGGCCGTGTGCAACTACGAGGTAGCCGAAGATCCGAGCTACGTGCGCGAGCACGGCGTGCCCATTCACGCCGACAAGTACTTTGAGCAGGTTCTCAAGGCTGTAACCAACGTGCTGTCGCCCGTCTTTCCCGGCGGCGAAACCGCGCGCAAGGACAAGTTTTTGCACATGGTGCTGCCGCGGCGCTTGCACTTGGAGCCGGCTTTTCTGCCGTACAGTGTCAAGGCGCACGAATGCTGTTGA'
UL54A_PRIMER_2 = 'CTCGTGCGTGTGCTACGAGAC'
UL54A_PRIMER_1 = 'AAGGGCGGCGACATCTGAAAC'
UL54A_PRIMER_1_REVERSED = 'GTTTCAGATGTCGCCGCCCTT'

UL54B_PRIMER_6 = 'GTTTCAGATGTCGCCGCCCTT'
UL54B_PRIMER_5 = 'CGTAGCTCGGATCTTCGGCTA' 
UL54B_PRIMER_5_REVERSED = 'TAGCCGAAGATCCGAGCTACG'

#UL54B = 'TCGGCTCCGGCAGTAGTGGCGGCGTCGGCGTTTCCAACGACAGTCACGGCGCCGGCGGTACTGCGGCGGTTTCGTACCAGGGTGCCACGGTGTTTGAGCCCGAGGTGGGTTATTACAACGACCCCGTGGCCGTGTTCGACTTTGCCAGCCTCTATCCTTCCATCATCATGGCTCACAACCTCTGCTACTCCACCCTGCTGGTGCCGGGTGGCGAGTACCCCGTGGACCCcGCCGATGTATACAGCGTCACGCTAGAGAACGGCGTGACTCACCGCTTTGTGCGTGCTTCGGTGCGCGTCTCGGTGCTTTCGGAACTGCTCAACAAGTGGGTTTCGCAGCGCCGTGCCGTGCGCGAATGCATGCGCGAGTGTCAAGACCCcGTGCGCCGTATGCTGCTCGACAAGGAACAGATGGCACTCAAAGTAACGTGTAACGCTTTCTACGGTTTTACCGGCGTGGTCAACGGCATGATGCCGTGTCTGCCCATCGCCGCCAGCATCACGCGCATCGGTCGCGACATGCTAGAGCGCACGGCGCGGTTCATCAAAGACAACTTTTC'.upper()
UL54B = 'TCGGCTCCGGCAGTAGTGGCGGCGTCGGCGTTTCCAACGACAGTCACGGCGCCGGCGGTACTGCGGCGGTTTCGTACCAGGGTGCCACGGTGTTTGAGCCCGAGGTGGGTTATTACAACGACCCCGTGGCCGTGTTCGACTTTGCCAGCCTCTATCCTTCCATCATCATGGCTCACAACCTCTGCTACTCCACCCTGCTGGTGCCGGGTGGCGAGTACCCCGTGGACCCcGCCGATGTATACAGCGTCACGCTAGAGAACGGCGTGACTCACCGCTTTGTGCGTGCTTCGGTGCGCGTCTCGGTGCTTTCGGAACTGCTCAACAAGTGGGTTTCGCAGCGCCGTGCCGTGCGCGAATGCATGCGCGAGTGTCAAGACCCcGTGCGCCGTATGCTGCTCGACAAGGAACAGATGGCACTCAAAGTAACGTGTAACGCTTTCTACGGTTTTACCGGCGTGGTCAACGGCATGATGCCGTGTCTGCCCATCGCCGCCAGCATCACGCGCATCGGTCGCGACATGCTAGAGCGCACGGCGCGGTTCATCAAAGACAACTTTTC'.upper()


# def random_dna(length):
#     res = []
#     while length:
#         res.append(choice(DNA_TOKENS))
#         length -= 1
#     return ''.join(res)

def get_sequence_between_primers(sequence, start_primer, end_primer):
    '''returns sequence of DNA between primers (including the primers)
    or None if there is no match
    '''
    # yes, it'd be possible to use simple index() ...
    # this opens more possibilities in future (imperfect primers)
    start = SequenceMatcher(None, sequence, start_primer)
    match = start.find_longest_match(0, len(sequence),
                                     0, len(start_primer))
    if match.size != len(start_primer):
        return None
    start_pos = match.a

    end = SequenceMatcher(None, sequence, end_primer)
    match = end.find_longest_match(0, len(sequence),
                                     0, len(end_primer))
    if match.size != len(end_primer):
        return None
    end_pos = match.a + match.size
    return sequence[start_pos:end_pos]

def _count_matches(reference, sample_, offset_):
    '''returns number of matches where sample[i+offset] == reference[i]'''
    r = reference[offset_:]
    s = sample_
    matches = 0
    for x in range(len(s)):
        if r[x] == s[x]:
            matches += 1
#    print offset_, matches
    return matches

def get_best_offset(reference, sample):
    '''returns best offset for sample so it best matches reference
    (has least number of differences
    '''
    len_diff = len(reference) - len(sample)
    assert len_diff >= 0, '[!] Sample is longer than reference!'
    offset = 0
    best_offset, best_matches = 0, 0
    while offset < len_diff:
        m = _count_matches(reference, sample, offset)
#        print offset, m
        if m > best_matches:
            best_matches = m
            best_offset = offset
        offset += 1
    if not best_matches:  # nothing good found
        return None
    return best_offset

def _fill_to_len(reference_, sample_, sample_offset_):
    '''left- and right-fills sample with spaces so len(sample) == len(reference)
    as it makes other functions much more simple
    '''
    assert len(reference_) >= len(sample_) + sample_offset_
    return '%s%s%s' % (FILL_CHAR * sample_offset_, 
                    sample_, 
               FILL_CHAR * (len(reference_) - (len(sample_) + sample_offset_)))
    
def _get_diffs(a, b):
    '''returns a string constructed using DIFF_CHAR and SAME_CHAR'''
    len_a = len(a)
    assert len_a == len(b)
    res = []
    i = 0
    while i < len_a:
        res.append((a[i] == FILL_CHAR or a[i] == b[i]) and SAME_CHAR or DIFF_CHAR)
        i += 1
    return ''.join(res)

def get_diffs(reference, sample, sample_offset, width=80,
              insert_blank_lines=True,
              show_index_numbers=True):
    '''prepares visual representation of DNA differences'''
    r = reference
    s = _fill_to_len(reference, sample, sample_offset)
    res = []
    curr_index = 0
    while r:
        rcut, r = r[:width], r[width:]
        scut, s = s[:width], s[width:]
        diffs = _get_diffs(scut, rcut)
        if show_index_numbers:
            rcut = '%s %s %s' % ('%6i' % (curr_index + 1),
                                 rcut,
                                 '%6i' % (curr_index + width))
            scut = '%s %s %s' % (' '*6,
                                 scut,
                                 ' '*6)
            diffs = '%s %s %s' % (' '*6,
                                  diffs,
                                  ' '*6)
        res.extend([rcut, scut, diffs])
        if not show_index_numbers and insert_blank_lines:
            res.append(' ')  # one space to keep <pre> in HTML happy. We only
                             # need to do this is show_index_numbers is False
                             # as it inserts blanks anyway
        curr_index += width
    return res

def display_diffs(*args, **kwargs):
    '''provides visual representation of DNA differences'''
    diffs = get_diffs(*args, **kwargs)
    i = 0
    for diff in diffs:
        print diff

def get_triplets(reference, sample, sample_offset, different_only=False):
    '''cuts reference and sample to sections of three (slicing done
    on reference) and returns list of tuples 
    (changed, index, ref_slice, sample_slice).
    
    Index is positional number of the triplet in the reference, starting from 1.
    
    Sample slice may will contain spaces where there is no sample data for 
    that section of reference. Changed is False in this case.
    
    This is useful for figuring out which sections are different to find
    mutations in DNA.
    
    Example:
        get_triplets('ACGACTCGC', 'ATT', 3) = [(False, 0, 'ACG', '   '),
                                               (True, 3, 'ACT', 'ATT'),
                                               (False, 6, 'CGC', '   ')]
    '''
    r = reference
    s = _fill_to_len(r, sample, sample_offset)
    idx = 1  # index from 1 as it's for humans
    res = []
    while r:
        r_slice, r = r[:3], r[3:]
        s_slice, s = s[:3], s[3:]
        # we only say r_slice and s_slice are different if s_slice
        # contains no spaces and really is different from r_slice
        if len(s_slice.strip()) == 3 and s_slice != r_slice:
            different = True
        else:
            different = False
        if different or not different_only:          
            res.append((different, idx, r_slice, s_slice)) # (( )) - add tuple
        idx += 1
    return res

if __name__ == '__main__':

#     # UL97
#     block_to_match = get_sequence_between_primers(UL97_REFERENCE,
#                                                   UL97_PRIMER_3,
#                                                   UL97_PRIMER_4_REVERSED)
#     matching_offset = get_best_offset(block_to_match, UL97F)
#     display_diffs(block_to_match, UL97F, matching_offset, width=140)

    # UL54A
    block_to_match = get_sequence_between_primers(UL54_REFERENCE,
                                                  UL54B_PRIMER_6,
                                                  UL54B_PRIMER_5_REVERSED)
    matching_offset = get_best_offset(block_to_match, UL54B)
    display_diffs(block_to_match, UL54B, matching_offset)

    for x in get_triplets(block_to_match, UL54B, matching_offset, 
                          different_only=True):
        print x
